/* tslint:disable */
/* eslint-disable */
/**
 * QuePasa RAG SaaS API
 * API for RAG retrieval, managing documents, files, and related operations including Telegram integration.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';

import type { RetrieveRelevanceWeights } from './RetrieveRelevanceWeights';
import {
    RetrieveRelevanceWeightsFromJSON,
    RetrieveRelevanceWeightsFromJSONTyped,
    RetrieveRelevanceWeightsToJSON,
} from './RetrieveRelevanceWeights';

/**
 *
 * @export
 * @interface RetrieveChunksRequest
 */
export interface RetrieveChunksRequest {
    /**
     * Natural language query to retrieve or answer.
     * @type {string}
     * @memberof RetrieveChunksRequest
     */
    question: string;

    /**
     * The name of a group of documents.
     * @type {string|Array<string>}
     * @memberof RetrieveChunksRequest
     */
    domain?: string | Array<string>;

    /**
     * A hybrid ranking formula for documents, balancing two parameters: text for full-text search and semantic for semantic search. The format allows you to adjust the weight of each component.
     * @type {RetrieveRelevanceWeights}
     * @memberof RetrieveChunksRequest
     */
    document_relevance_weights?: RetrieveRelevanceWeights;

    /**
     * A hybrid ranking formula for document chunks, using the same two parameters as document_relevance_weights: text for full-text search and semantic for semantic search. This adjusts the relevance of different chunks of a document based on these weights.
     * @type {RetrieveRelevanceWeights}
     * @memberof RetrieveChunksRequest
     */
    chunk_relevance_weights?: RetrieveRelevanceWeights;
}

/**
 * Check if a given object implements the RetrieveChunksRequest interface.
 */
export function instanceOfRetrieveChunksRequest(value: object): value is RetrieveChunksRequest {
    return true;
}

export function RetrieveChunksRequestFromJSON(json: any): RetrieveChunksRequest {
    return RetrieveChunksRequestFromJSONTyped(json, false);
}

export function RetrieveChunksRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RetrieveChunksRequest {
    if (json == null) {
        return json;
    }
    return {
        'question': json['question'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'document_relevance_weights': json['document_relevance_weights'] == null ? undefined : RetrieveRelevanceWeightsFromJSON(json['document_relevance_weights']),
        'chunk_relevance_weights': json['chunk_relevance_weights'] == null ? undefined : RetrieveRelevanceWeightsFromJSON(json['chunk_relevance_weights']),
    };
}

export function RetrieveChunksRequestToJSON(value?: RetrieveChunksRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        'question': value['question'],
        'domain': value['domain'],
        'document_relevance_weights': RetrieveRelevanceWeightsToJSON(value['document_relevance_weights']),
        'chunk_relevance_weights': RetrieveRelevanceWeightsToJSON(value['chunk_relevance_weights']),
    };
}
