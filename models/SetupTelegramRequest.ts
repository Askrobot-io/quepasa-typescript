/* tslint:disable */
/* eslint-disable */
/**
 * QuePasa RAG SaaS API
 * API for RAG retrieval, managing documents, files, and related operations including Telegram integration.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SetupTelegramRequestCommands } from './SetupTelegramRequestCommands';
import {
    SetupTelegramRequestCommandsFromJSON,
    SetupTelegramRequestCommandsFromJSONTyped,
    SetupTelegramRequestCommandsToJSON,
} from './SetupTelegramRequestCommands';

/**
 * 
 * @export
 * @interface SetupTelegramRequest
 */
export interface SetupTelegramRequest {
    /**
     * Telegram bot token.
     * @type {string}
     * @memberof SetupTelegramRequest
     */
    token?: string;
    /**
     * 
     * @type {SetupTelegramRequestCommands}
     * @memberof SetupTelegramRequest
     */
    commands?: SetupTelegramRequestCommands;
    /**
     * (Optional) The name of a group of documents.
     * @type {string}
     * @memberof SetupTelegramRequest
     */
    domain?: string;
    /**
     * (Optional) This is the model that will generate answers to questions based on the retrieved search results.
     * @type {string}
     * @memberof SetupTelegramRequest
     */
    llm?: string;
    /**
     * (Optional) The prompt used for RAG, with placeholders like {{LANGUAGE}} for the language in which the question was asked, and {{SOURCES}} for listing the relevant chunks.
     * @type {string}
     * @memberof SetupTelegramRequest
     */
    prompt?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SetupTelegramRequest
     */
    userNames?: Array<string>;
}

/**
 * Check if a given object implements the SetupTelegramRequest interface.
 */
export function instanceOfSetupTelegramRequest(value: object): value is SetupTelegramRequest {
    return true;
}

export function SetupTelegramRequestFromJSON(json: any): SetupTelegramRequest {
    return SetupTelegramRequestFromJSONTyped(json, false);
}

export function SetupTelegramRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetupTelegramRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'token': json['token'] == null ? undefined : json['token'],
        'commands': json['commands'] == null ? undefined : SetupTelegramRequestCommandsFromJSON(json['commands']),
        'domain': json['domain'] == null ? undefined : json['domain'],
        'llm': json['llm'] == null ? undefined : json['llm'],
        'prompt': json['prompt'] == null ? undefined : json['prompt'],
        'userNames': json['user_names'] == null ? undefined : json['user_names'],
    };
}

export function SetupTelegramRequestToJSON(value?: SetupTelegramRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'token': value['token'],
        'commands': SetupTelegramRequestCommandsToJSON(value['commands']),
        'domain': value['domain'],
        'llm': value['llm'],
        'prompt': value['prompt'],
        'user_names': value['userNames'],
    };
}

